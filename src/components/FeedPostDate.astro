---
const { date, index, isDaily = false } = Astro.props;
---

<feed-post-date class="text-xs text-skin-muted" data-date={date} data-index={index} data-is-daily={isDaily}>
  <span class="postTimeEle"></span>
</feed-post-date>

<script>
  import dayjs from "dayjs";
  import relativeTime from "dayjs/plugin/relativeTime";
  import "dayjs/locale/zh-cn";
  import {t} from '../i18n/utils'
  import {config} from "../consts";

  dayjs.extend(relativeTime);
  dayjs.locale(config.lang || 'en');
  class FeedPostDate extends HTMLElement {
    constructor() {
      super();
      // 从 data（数据）属性中读取消息。
      const date = this.dataset.date;
      const index = this.dataset.index;
      const isDaily = this.dataset.isDaily === 'true';

      let timeSpan = document.getElementsByClassName("postTimeEle");
      let postDateFromNow;
      
      if (isDaily) {
        // For daily posts, calculate time until expiration (24 hours from publication)
        const expirationDate = date ? dayjs(date).add(24, 'hour') : dayjs().add(24, 'hour');
        postDateFromNow = expirationDate.fromNow(true); // true = without suffix
      } else {
        // For regular posts, show time since publication
        postDateFromNow = date ? dayjs(date).fromNow() : dayjs().format("YYYY-MM-DD");
      }
      
      // Use different text for daily posts
      const textKey = isDaily ? 'feed.expiresIn' : 'feed.publishedIn';
      const defaultText = isDaily ? 'Expires in' : 'Published in';
      const displayText = window.getCurrentTranslation ? window.getCurrentTranslation(textKey) : defaultText;
      
      timeSpan[index].innerHTML = `<span class="opacity-60">${displayText}:</span> <span>${postDateFromNow}</span>`;
      
      // Add translation key for dynamic updates
      timeSpan[index].setAttribute('data-translate-template', textKey);
      timeSpan[index].setAttribute('data-date-value', postDateFromNow);
    }
  }
  customElements.define("feed-post-date", FeedPostDate);
</script>
