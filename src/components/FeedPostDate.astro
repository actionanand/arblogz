---
const { date, index, isDaily = false } = Astro.props;
---

<feed-post-date class="text-xs text-skin-muted" data-date={date} data-index={index} data-is-daily={isDaily}>
  <span class="postTimeEle"></span>
</feed-post-date>

<script>
  import dayjs from "dayjs";
  import relativeTime from "dayjs/plugin/relativeTime";
  import durationPlugin from "dayjs/plugin/duration";
  import "dayjs/locale/zh-cn";
  import {t} from '../i18n/utils'
  import {config} from "../consts";

  dayjs.extend(relativeTime);
  dayjs.extend(durationPlugin);
  dayjs.locale(config.lang || 'en');
  class FeedPostDate extends HTMLElement {
    intervalId: ReturnType<typeof setInterval> | undefined;

    constructor() {
      super();
      this.updateDisplay();
    }

    updateDisplay() {
      // 从 data（数据）属性中读取消息。
      const date = this.dataset.date;
      const index = this.dataset.index;
      const isDaily = this.dataset.isDaily === 'true';

      let timeSpan = document.getElementsByClassName("postTimeEle");
      let postDateFromNow;
      
      if (isDaily) {
        // For daily posts, show countdown to expiration
        const publishDate = date ? dayjs(date) : dayjs();
        const now = dayjs();
        const expirationDate = publishDate.add(24, 'hour');
        const timeDiff = dayjs.duration(expirationDate.diff(now));
        
        const hours = Math.floor(timeDiff.asHours());
        const minutes = Math.floor(timeDiff.minutes());
        const seconds = Math.floor(timeDiff.seconds());
        
        // Check if expired (this should rarely happen due to server-side filtering)
        if (timeDiff.asMilliseconds() <= 0) {
          // Hide the entire daily post
          const postContainer = this.closest('.py-4') as HTMLElement;
          if (postContainer) {
            postContainer.style.display = 'none';
          }
          return; // Don't update the time display
        } else {
          // Build countdown string, skipping zero units
          let countdownParts = [];
          if (hours > 0) countdownParts.push(`${hours}h`);
          if (minutes > 0) countdownParts.push(`${minutes}m`);
          countdownParts.push(`${seconds}s`);
          postDateFromNow = countdownParts.join(' ');
        }
      } else {
        // For regular posts, show time since publication
        postDateFromNow = date ? dayjs(date).fromNow() : dayjs().format("YYYY-MM-DD");
      }
      
      // Use different text for daily posts
      const textKey = isDaily ? 'feed.expiresIn' : 'feed.publishedIn';
      const defaultText = isDaily ? 'Expires in' : 'Published in';
      const displayText = window.getCurrentTranslation ? window.getCurrentTranslation(textKey) : defaultText;
      
      // Find the timeSpan element within this component
      const timeSpanElement = this.querySelector('.postTimeEle');
      if (timeSpanElement) {
        timeSpanElement.innerHTML = `<span class="opacity-60">${displayText}:</span> <span>${postDateFromNow}</span>`;
        
        // Add translation key for dynamic updates
        timeSpanElement.setAttribute('data-translate-template', textKey);
        timeSpanElement.setAttribute('data-date-value', postDateFromNow);
      } else {
        console.warn('Could not find .postTimeEle element in FeedPostDate component');
      }
    }

    connectedCallback() {
      // Update every second for daily posts
      if (this.dataset.isDaily === 'true') {
        this.intervalId = setInterval(() => {
          this.updateDisplay();
        }, 1000);
      }
    }

    disconnectedCallback() {
      if (this.intervalId) {
        clearInterval(this.intervalId);
      }
    }
  }
  customElements.define("feed-post-date", FeedPostDate);
</script>
