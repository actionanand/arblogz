---
import {getCollectionByName} from "@/utils/getCollectionByName";
import getUniqueTags from "@/utils/getUniqueTags";
import getCountByCategory from "@/utils/getCountByCategory";
import HeaderLink from './HeaderLink.astro';
import ThemeIcon from './ThemeIcon.astro'
import MenuIcon from './MenuIcon.astro'
import {site, categories, infoLinks} from '@/consts';
import AsideIcon from "./SidebarIcon.astro";
import {t} from "@/i18n/utils";
import getCountByTagName from "@/utils/getCountByTagName";
import getUrl from "@/utils/getUrl";
const blogs = await getCollectionByName('blog')
let tagArr = getUniqueTags(blogs);
let categoryCount = getCountByCategory(blogs);
let tagCount = getCountByTagName(blogs);
---

<header class="fixed top-0 w-full bg-skin-fill text-skin-base z-10">
  <div class="flex items-center justify-between container">
    <div class="block xl:hidden">
      <MenuIcon></MenuIcon>
    </div>
    <a class="brand-logo text-2xl p-4 font-bold relative" href={getUrl("/")}>{site.title}</a>
    <div class="flex items-center">
      <div class="hidden xl:block">
        <div class="flex items-center space-x-1 pr-4">
          {
            categories.map(category => (
              <HeaderLink href={category.href} icon={category.iconClass} target={category.target || '_self'} menuChildren={category.children}>
                <span data-translate={category.translationKey}>{t(category.translationKey)}</span>
              </HeaderLink>
            ))
          }
        </div>
      </div>
      <ThemeIcon></ThemeIcon>
      <div class="block xl:hidden">
        <AsideIcon></AsideIcon>
      </div>
    </div>
  </div>
  <div id="mobile-menu" class="hidden text-center overflow-y-auto pb-8" style="height: calc(100vh - 64px)">
    {
      categories.map((category) => (
        <div class="py-2">
          <a class="hover:text-skin-active transition-colors" href={getUrl(category.href)}>
            <i class={category.iconClass}/>
            <span data-translate={category.translationKey}>{t(category.translationKey)}</span>
          </a>
          {
            category.children && category.children.length > 0 &&
            <div class="divider-horizontal"></div>
          }
          {
            category.children && category.children.length > 0 && (
              <div class="mobile-language-dropdown">
                <div class="language-dropdown-header" onclick="toggleMobileLanguageMenu()">
                  <span class="current-language" id="mobile-current-language">English</span>
                  <i class="ri-arrow-down-s-line dropdown-arrow" id="mobile-dropdown-arrow"></i>
                </div>
                <div class="language-dropdown-menu" id="mobile-language-menu">
                  {
                    category.children.map(sub =>
                      (
                        <a 
                          class="language-dropdown-item language-item" 
                          href={sub.href}
                          data-language-link="true"
                          data-language-code={sub.lang}
                        >
                          <i class={sub.iconClass}/>
                          <span>{sub.name}</span>
                        </a>
                      )
                    )
                  }
                </div>
              </div>
            )
          }
          {
            !(category.children && category.children.length > 0) && (
              <div class="space-y-4 text-sm">
                {
                  category.children && category.children.map(sub =>
                    (
                      <a 
                        class="block hover:text-skin-active language-item" 
                        href={sub.href}
                        data-language-link="true"
                        data-language-code={sub.lang}
                      >
                        <i class={sub.iconClass}/>
                        <span>{sub.name}</span>
                      </a>
                    )
                  )
                }
              </div>
            )
          }
        </div>
      ))
    }
  </div>
  <div id="personal-info" class="hidden break-all overflow-y-auto pb-8" style="height: calc(100vh - 64px)">
    <img class="avatar my-4 mx-auto" src={getUrl(site.avatar)} alt="avatar"/>
    <div class="mb-2 text-center">{site.motto}</div>
    <div class="flex items-center justify-center flex-wrap">
      {
        infoLinks.map((infoItem) => (
          <a title={infoItem.name} href={infoItem.outlink} target="_blank">
            <i class={infoItem.icon + " text-2xl mr-2 cursor-pointer"}/>
          </a>
        ))
      }
    </div>
    <div class="divider-horizontal-mini"></div>
    <div class="text-center">
      {
        Object.keys(categoryCount).length > 0 && (
          <div>
            <i class="ri-folder-3-line menu-icon"/><span data-translate="sidebar.categories">{t('sidebar.categories')}</span>
          </div>
        )
      }
      {
        Object.keys(categoryCount).map((category) => (
          <div class="my-2 break-all truncate">
            <a class="hover:text-skin-active transition-colors" title={category + " (" + categoryCount[category] + ")"} href={getUrl("/category/") + category}>
              {category + " (" + categoryCount[category] + ")"}
            </a>
          </div>

        ))
      }
      {
        tagArr.length > 0 && (
          <div class="divider-horizontal-mini"></div>
          <div class="text-center">
            <i class="ri-price-tag-3-line menu-icon"/>
            <span data-translate="sidebar.tags">{t('sidebar.tags')}</span>
          </div>
        )
      }
      {
        tagArr &&
        tagArr.map((tag) => (
          <div class="my-2 break-all truncate">
            <a class="hover:text-skin-active my-2 transition-colors" title={tag} href={getUrl("/tags/") + tag}>{tag + " (" + tagCount[tag] + ")"}</a>
          </div>
        ))
      }
    </div>

  </div>
</header>

<script>
  // Mobile language dropdown toggle
  window.toggleMobileLanguageMenu = function() {
    const menu = document.getElementById('mobile-language-menu');
    const arrow = document.getElementById('mobile-dropdown-arrow');
    
    if (menu && arrow) {
      menu.classList.toggle('open');
      arrow.classList.toggle('open');
    }
  };

  // Update current language display
  function updateMobileLanguageDisplay() {
    const currentLang = window.getCurrentLanguage && window.getCurrentLanguage() || 'en';
    const currentLangElement = document.getElementById('mobile-current-language');
    
    // Language name mapping
    const languageNames = {
      'ta': 'தமிழ்',
      'en': 'English',
      'zh-cn': '简体中文',
      'zh-Hant': '繁體中文',
      'cs': 'Čeština',
      'fr': 'Français',
      'kn': 'ಕನ್ನಡ',
      'hi': 'हिन्दी',
      'ar': 'العربية'
    };
    
    if (currentLangElement) {
      currentLangElement.textContent = languageNames[currentLang] || 'English';
    }
  }

  // Update display when page loads
  document.addEventListener('DOMContentLoaded', function() {
    setTimeout(updateMobileLanguageDisplay, 100);
  });

  // Update display when language changes
  document.addEventListener('translationComplete', function() {
    updateMobileLanguageDisplay();
  });

  // Close dropdown when clicking outside
  document.addEventListener('click', function(e) {
    const dropdown = document.querySelector('.mobile-language-dropdown');
    const menu = document.getElementById('mobile-language-menu');
    const arrow = document.getElementById('mobile-dropdown-arrow');
    
    if (dropdown && menu && arrow && !dropdown.contains(e.target)) {
      menu.classList.remove('open');
      arrow.classList.remove('open');
    }
  });

  // Close dropdown when language is selected
  document.addEventListener('click', function(e) {
    if (e.target.closest('.language-dropdown-item')) {
      const menu = document.getElementById('mobile-language-menu');
      const arrow = document.getElementById('mobile-dropdown-arrow');
      
      if (menu && arrow) {
        menu.classList.remove('open');
        arrow.classList.remove('open');
      }
    }
  });
</script>