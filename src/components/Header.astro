---
import {getCollectionByName} from "@/utils/getCollectionByName";
import getUniqueTags from "@/utils/getUniqueTags";
import getCountByCategory from "@/utils/getCountByCategory";
import HeaderLink from './HeaderLink.astro';
import ThemeIcon from './ThemeIcon.astro'
import MenuIcon from './MenuIcon.astro'
import {site, categories, infoLinks} from '@/consts';
import AsideIcon from "./SidebarIcon.astro";
import {t} from "@/i18n/utils";
import getCountByTagName from "@/utils/getCountByTagName";
import getUrl from "@/utils/getUrl";
const blogs = await getCollectionByName('blog')
let tagArr = getUniqueTags(blogs);
let categoryCount = getCountByCategory(blogs);
let tagCount = getCountByTagName(blogs);
---

<header class="fixed top-0 w-full bg-skin-fill text-skin-base z-10">
  <div class="flex items-center justify-between container">
    <div class="block xl:hidden">
      <MenuIcon></MenuIcon>
    </div>
    <a class="text-2xl p-4" href={getUrl("/")}>{site.title}</a>
    <div class="flex items-center">
      <div class="hidden xl:block">
        <div class="flex items-center space-x-5 pr-4">
          {
            categories.map(category => (
              <HeaderLink href={category.href} icon={category.iconClass} target={category.target || '_self'} menuChildren={category.children}>
                <span data-translate={category.translationKey}>{t(category.translationKey)}</span>
              </HeaderLink>
            ))
          }
        </div>
      </div>
      <ThemeIcon></ThemeIcon>
      <div class="block xl:hidden">
        <AsideIcon></AsideIcon>
      </div>
    </div>
  </div>
  <div id="mobile-menu" class="hidden text-center overflow-y-auto pb-8" style="height: calc(100vh - 64px)">
    {
      categories.map((category) => (
        <div class="py-2">
          {/* Special handling for Language dropdown in mobile */}
          {category.translationKey === 'nav.language' ? (
            <div class="relative inline-block text-left w-full max-w-xs mx-auto">
              <button 
                id="mobile-language-btn" 
                type="button" 
                class="inline-flex justify-center w-full px-4 py-2 text-sm font-medium text-skin-base bg-skin-fill border border-skin-line rounded-md hover:bg-skin-accent focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-skin-accent"
                aria-expanded="false" 
                aria-haspopup="true"
              >
                <i class={category.iconClass + " mr-2"}/>
                <span data-translate={category.translationKey}>{t(category.translationKey)}</span>
                <i class="ri-arrow-down-s-line ml-2 -mr-1"/>
              </button>
              
              <div 
                id="mobile-language-dropdown" 
                class="hidden absolute left-1/2 transform -translate-x-1/2 mt-2 w-56 rounded-md shadow-lg bg-skin-fill ring-1 ring-skin-line ring-opacity-5 focus:outline-none z-[60]"
                role="menu" 
                aria-orientation="vertical" 
                aria-labelledby="mobile-language-btn"
              >
                <div class="py-1" role="none">
                  {
                    category.children && category.children.map(sub => (
                      <a 
                        class="flex items-center px-4 py-2 text-sm text-skin-base hover:bg-skin-accent hover:text-skin-active transition-colors cursor-pointer" 
                        href="javascript:void(0);"
                        data-language-link="true"
                        data-language-code={sub.lang}
                        role="menuitem"
                      >
                        <i class={sub.iconClass + " mr-3"}/>
                        <span>{sub.name}</span>
                      </a>
                    ))
                  }
                </div>
              </div>
            </div>
          ) : (
            <a class=" hover:text-skin-active" href={getUrl(category.href)}>
              <i class={category.iconClass}/>
              <span data-translate={category.translationKey}>{t(category.translationKey)}</span>
            </a>
          )}
          {
            (category.children && category.children.length > 0 && category.translationKey !== 'nav.language') &&
            <div class="divider-horizontal"></div>
          }
          {/* Only show expanded children for non-language categories */}
          {
            (category.translationKey !== 'nav.language') && (
              <div class="space-y-4 text-sm">
                {
                  category.children && category.children.map(sub =>
                    (
                      <a 
                        class="block hover:text-skin-active" 
                        href={sub.href}
                        data-language-link="true"
                        data-language-code={sub.lang}
                      >
                        <i class={sub.iconClass}/>
                        <span>{sub.name}</span>
                      </a>
                    )
                  )
                }
              </div>
            )
          }
        </div>
      ))
    }
  </div>
  <div id="personal-info" class="hidden break-all overflow-y-auto pb-8" style="height: calc(100vh - 64px)">
    <img class="avatar my-4 mx-auto" src={getUrl(site.avatar)} alt="avatar"/>
    <div class="mb-2 text-center">{site.motto}</div>
    <div class="flex items-center justify-center flex-wrap">
      {
        infoLinks.map((infoItem) => (
          <a title={infoItem.name} href={infoItem.outlink} target="_blank">
            <i class={infoItem.icon + " text-2xl mr-2 cursor-pointer"}/>
          </a>
        ))
      }
    </div>
    <div class="divider-horizontal-mini"></div>
    <div class="text-center">
      {
        Object.keys(categoryCount).length > 0 && (
          <div>
            <i class="ri-folder-3-line menu-icon"/><span data-translate="sidebar.categories">{t('sidebar.categories')}</span>
          </div>
        )
      }
      {
        Object.keys(categoryCount).map((category) => (
          <div class="my-2 break-all truncate">
            <a class="hover:text-skin-active" title={category + " (" + categoryCount[category] + ")"} href={getUrl("/category/") + category}>
              {category + " (" + categoryCount[category] + ")"}
            </a>
          </div>

        ))
      }
      {
        tagArr.length > 0 && (
          <div class="divider-horizontal-mini"></div>
          <div class="text-center">
            <i class="ri-price-tag-3-line menu-icon"/>
            <span data-translate="sidebar.tags">{t('sidebar.tags')}</span>
          </div>
        )
      }
      {
        tagArr &&
        tagArr.map((tag) => (
          <div class="my-2 break-all truncate">
            <a class="hover:text-skin-active my-2" title={tag} href={getUrl("/tags/") + tag}>{tag + " (" + tagCount[tag] + ")"}</a>
          </div>
        ))
      }
    </div>

  </div>
</header>

<script>
  // Mobile language dropdown functionality
  function initMobileLanguageDropdown() {
    const mobileLanguageBtn = document.getElementById('mobile-language-btn');
    const mobileLanguageDropdown = document.getElementById('mobile-language-dropdown');
    
    if (mobileLanguageBtn && mobileLanguageDropdown) {
      // Toggle dropdown on button click
      mobileLanguageBtn.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        const isOpen = !mobileLanguageDropdown.classList.contains('hidden');
        
        if (isOpen) {
          mobileLanguageDropdown.classList.add('hidden');
          mobileLanguageBtn.setAttribute('aria-expanded', 'false');
        } else {
          mobileLanguageDropdown.classList.remove('hidden');
          mobileLanguageBtn.setAttribute('aria-expanded', 'true');
        }
      });
      
      // Close dropdown when clicking outside
      document.addEventListener('click', (e) => {
        if (!mobileLanguageBtn.contains(e.target) && !mobileLanguageDropdown.contains(e.target)) {
          mobileLanguageDropdown.classList.add('hidden');
          mobileLanguageBtn.setAttribute('aria-expanded', 'false');
        }
      });
      
      // Close dropdown when selecting a language
      const languageLinks = mobileLanguageDropdown.querySelectorAll('[data-language-link="true"]');
      languageLinks.forEach(link => {
        link.addEventListener('click', () => {
          mobileLanguageDropdown.classList.add('hidden');
          mobileLanguageBtn.setAttribute('aria-expanded', 'false');
        });
      });
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initMobileLanguageDropdown);
  } else {
    initMobileLanguageDropdown();
  }
</script>
