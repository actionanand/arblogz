---
import IndexPage from "@/layouts/IndexPage.astro";
import {t} from '@/i18n/utils';

const frontmatter = {
  donate: true,
  comment: false
};

// Function to process markdown-like syntax
function processMarkdown(text: string): string {
  return text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
}
---

<IndexPage frontmatter={frontmatter}>
  <article class="markdown-body">
    <h2 data-translate="about.website.title">{t('about.website.title')}</h2>
    <p data-translate="about.website.content" set:html={processMarkdown(t('about.website.content'))}></p>

    <h2 data-translate="about.me.title">{t('about.me.title')}</h2>
    <p data-translate="about.me.content" set:html={processMarkdown(t('about.me.content'))}></p>

    <h2 data-translate="about.other.title">{t('about.other.title')}</h2>
    <p data-translate="about.other.content" set:html={processMarkdown(t('about.other.content'))}></p>
  </article>
</IndexPage>

<script>
  // Helper function to process markdown-like syntax
  function processMarkdownText(text: string): string {
    return text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
  }

  // Client-side translation update for about page (runs after global translation system)
  function updateAboutMarkdown() {
    // Find all about page content elements that might have markdown
    const aboutContentElements = document.querySelectorAll('[data-translate^="about."]');
    aboutContentElements.forEach(element => {
      const text = element.textContent || '';
      if (text.includes('**')) {
        element.innerHTML = processMarkdownText(text);
      }
    });
  }

  // Run markdown processing after global translations update
  document.addEventListener('DOMContentLoaded', function() {
    setTimeout(updateAboutMarkdown, 100); // Reduced from 500ms
  });
  
  // Run after language changes (global system runs first, then we process markdown)
  document.addEventListener('languageChanged', function() {
    setTimeout(updateAboutMarkdown, 150); // Reduced from 500ms
  });
  
  // Listen for language selector clicks
  document.addEventListener('click', function(e) {
    const target = e.target as HTMLElement;
    if (target && target.closest('[data-language-link]')) {
      setTimeout(updateAboutMarkdown, 500); // Reduced from 600ms
    }
  });
</script>
