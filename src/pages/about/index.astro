---
import LegalPage from "@/layouts/LegalPage.astro";
import {t} from '@/i18n/utils';

// Function to process markdown-like syntax
function processMarkdown(text: string): string {
  return text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
}
---

<LegalPage title={t('about.website.title')}>
  <article class="markdown-body">
    <h2 data-translate="about.website.title">{t('about.website.title')}</h2>
    <p data-translate="about.website.content" set:html={processMarkdown(t('about.website.content'))}></p>

    <h2 data-translate="about.me.title">{t('about.me.title')}</h2>
    <p data-translate="about.me.content" set:html={processMarkdown(t('about.me.content'))}></p>

    <h2 data-translate="about.other.title">{t('about.other.title')}</h2>
    <p data-translate="about.other.content" set:html={processMarkdown(t('about.other.content'))}></p>
    
    <h2 data-translate="about.legal.title">{t('about.legal.title')}</h2>
    <div class="legal-links">
      <ul>
        <li><a href="/privacy" data-translate="about.legal.privacy">{t('about.legal.privacy')}</a></li>
        <li><a href="/terms" data-translate="about.legal.terms">{t('about.legal.terms')}</a></li>
        <li><a href="/copyright" data-translate="about.legal.copyright">{t('about.legal.copyright')}</a></li>
        <li><a href="/disclaimer" data-translate="about.legal.disclaimer">{t('about.legal.disclaimer')}</a></li>
        <li><a href="/faq" data-translate="about.legal.faq">{t('about.legal.faq')}</a></li>
      </ul>
    </div>
  </article>
</LegalPage>

<script>
  // Helper function to process markdown-like syntax
  function processMarkdownText(text: string): string {
    return text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
  }

  // Client-side translation update for about page (runs after global translation system)
  function updateAboutMarkdown() {
    // Find all about page content elements that might have markdown
    const aboutContentElements = document.querySelectorAll('[data-translate^="about."]');
    aboutContentElements.forEach(element => {
      const text = element.textContent || '';
      if (text.includes('**')) {
        element.innerHTML = processMarkdownText(text);
      }
    });
  }

  // Run markdown processing after global translations update
  document.addEventListener('DOMContentLoaded', function() {
    setTimeout(updateAboutMarkdown, 100);
  });
</script>

<style>
  .legal-links {
    margin-top: 1rem;
  }
  
  .legal-links ul {
    list-style: none;
    padding: 0;
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem 1.5rem;
  }
  
  .legal-links li {
    margin: 0;
  }
  
  .legal-links a {
    color: var(--tw-prose-links);
    text-decoration: none;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    transition: all 0.2s ease;
    font-size: 0.875rem;
  }
  
  .legal-links a:hover {
    background-color: var(--tw-prose-links);
    color: var(--tw-prose-invert-links);
  }
  
  @media (max-width: 640px) {
    .legal-links ul {
      flex-direction: column;
      gap: 0.5rem;
    }
  }
</style>