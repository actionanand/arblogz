---
import { site, config } from "@/consts";
import IndexPage from '@/layouts/IndexPage.astro'
import Pagination from "@/components/Pagination.astro";
import { sortPostsByDate } from "@/utils/sortPostsByDate";
import { getCollectionByName } from "@/utils/getCollectionByName";
import FeedPreview from "@/components/FeedPreview.astro";
import getUrl from "@/utils/getUrl";
import { getCollection } from 'astro:content';
import DailyStatusLoader from "@/components/DailyStatusLoader.astro";

export async function getStaticPaths({ paginate }) {
  let posts = await getCollectionByName("feed");
  posts = sortPostsByDate(posts);
  
  // Parse daily updates
  const dailyCollection = await getCollection('daily-status');
  const dailyEntry = dailyCollection.find(entry => entry.slug === 'daily-updates');
  const body = dailyEntry ? dailyEntry.body : '';
  // Calculate today's date in IST (GMT +5:30)
  const now = new Date();
  const istOffset = 5.5 * 60 * 60 * 1000; // 5.5 hours in milliseconds
  const istDate = new Date(now.getTime() + istOffset);
  const today = istDate.toISOString().split('T')[0];
  
  // Parse multi-line content blocks starting with date
  const todaysUpdates = [];
  // Split by date lines and find content from last 24 hours
  const lines = body.split('\n');
  let currentContent = '';
  let isValidContent = false;
  let publishDate = null;
  
  for (const line of lines) {
    const dateMatch = line.match(/^(\d{4}-\d{2}-\d{2} \d{2}:\d{2}):\s*(.*)$/);
    if (dateMatch) {
      // If we were collecting valid content, save it
      if (isValidContent && currentContent.trim() && publishDate) {
        // Check if this content should be shown now (server-side filtering)
        const now = new Date();
        const contentTime = publishDate.getTime();
        const currentTime = now.getTime();
        const timeDiffHours = (currentTime - contentTime) / (1000 * 60 * 60);
        
        // Only include if: published time has passed AND not expired (within 24 hours)
        if (contentTime <= currentTime && timeDiffHours <= 24) {
          // Support maximum 1000 characters
          let content = currentContent.trim();
          if (content.length > 1000) {
            content = content.substring(0, 1000) + '...';
          }
          todaysUpdates.push({
            slug: `daily-${Date.now()}-${todaysUpdates.length}`,
            data: {
              title: 'Daily Update',
              description: content.substring(0, 200) + (content.length > 200 ? '...' : ''),
              date: publishDate, // Use parsed publish date
              draft: false,
              isDaily: true,
            },
            body: content,
            rawContent: content,
            render: () => ({ Content: () => content }),
          });
        }
      }
      
      // Parse new date entry
      const fullDateTime = dateMatch[1];
      const [datePart, timePart] = fullDateTime.split(' ');
      const [year, month, day] = datePart.split('-').map(Number);
      const [hours, minutes] = timePart.split(':').map(Number);
      
      // Create UTC timestamp for the IST time (IST = UTC + 5.5 hours)
      const contentUtcTime = Date.UTC(year, month - 1, day, hours, minutes, 0) - istOffset;
      
      isValidContent = true;
      publishDate = new Date(contentUtcTime); // Convert back to Date object for display
      currentContent = dateMatch[2]; // Start with content after date
    } else if (isValidContent) {
      // Continue collecting content for valid entries
      currentContent += '\n' + line;
    }
  }
  
  // Don't forget the last content block
  if (isValidContent && currentContent.trim() && publishDate) {
    // Check if this content should be shown now (server-side filtering)
    const now = new Date();
    const contentTime = publishDate.getTime();
    const currentTime = now.getTime();
    const timeDiffHours = (currentTime - contentTime) / (1000 * 60 * 60);
    
    // Only include if: published time has passed AND not expired (within 24 hours)
    if (contentTime <= currentTime && timeDiffHours <= 24) {
      let content = currentContent.trim();
      if (content.length > 1000) {
        content = content.substring(0, 1000) + '...';
      }
      todaysUpdates.push({
        slug: `daily-${Date.now()}-${todaysUpdates.length}`,
        data: {
          title: 'Daily Update',
          description: content.substring(0, 200) + (content.length > 200 ? '...' : ''),
          date: publishDate, // Use parsed publish date
          draft: false,
          isDaily: true,
        },
        body: content,
        rawContent: content,
        render: () => ({ Content: () => content }),
      });
    }
  }
  
  // Note: API updates now handled client-side for real-time updates
  // Remove server-side API fetching to enable real-time updates without rebuild
  
  // Prepend local daily updates to posts
  posts = [...todaysUpdates, ...posts];
  
  return paginate(posts, { pageSize: site.feedPageSize });
}

// 所有分页数据都将传递给 "page" 参数

const { page } = Astro.props;
---

<IndexPage>
    <!-- Real-time API daily status loader -->
    <DailyStatusLoader />
    
    {page.data.map((post, index) => <FeedPreview post={post} index={index} />)}
  <Pagination
    currentPage={page.currentPage}
    totalPage={page.lastPage}
    url={page.slug}
    prefixUrl={getUrl("/feed/")}
  />
</IndexPage>
